<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_bulletgenparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]= 2;
type= 0;
dmg= 0;
i= 0;
while(i &lt; 99) {
    btype[i]= 0;
    i++;
}
bmax= 0;
bno= 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(btype[bno] == 0) ggg= instance_create(0, 0, 353/* obj_spiderbullet */);
if(btype[bno] == 1) ggg= instance_create(0, 0, 351/* obj_donutbullet */);
if(btype[bno] == 2) ggg= instance_create(0, 0, 355/* obj_croissant */);
if(btype[bno] &lt; 3) {
    if(bchoice[bno] == 0) ggg.choice= choose(1, 2, 3);
    else  ggg.choice= bchoice[bno];
    if(bside[bno] == 2) ggg.side= choose(0, 1);
    else  ggg.side= bside[bno];
    ggg.speedfactor= bspeed[bno];
    ggg.dmg= dmg;
    if(instance_exists(360/* obj_spiderb */) &amp;&amp; obj_spiderb.turnamt &gt;= 15) {
        with(ggg) dmg--;
    }
}
if(btype[bno] == 3) {
    gg1= instance_create(0, 0, 353/* obj_spiderbullet */);
    gg2= instance_create(0, 0, 353/* obj_spiderbullet */);
    if(bchoice[bno] == 1) {
        gg1.choice= 1;
        gg2.choice= 2;
    }
    if(bchoice[bno] == 2) {
        gg1.choice= 1;
        gg2.choice= 3;
    }
    if(bchoice[bno] == 3) {
        gg1.choice= 2;
        gg2.choice= 3;
    }
    if(bside[bno] == 2) {
        gg1.side= choose(0, 1);
        gg2.side= gg1.side;
    } else  {
        gg1.side= bside[bno];
        gg2.side= bside[bno];
    }
    gg1.speedfactor= bspeed[bno];
    gg2.speedfactor= bspeed[bno];
    gg1.dmg= dmg;
    gg2.dmg= dmg;
    if(instance_exists(360/* obj_spiderb */) &amp;&amp; obj_spiderb.turnamt &gt;= 15) {
        with(gg1) dmg--;
        with(gg2) dmg--;
    }
}
if(btime[bno] == 0) btime[bno]= global.firingrate;
alarm[2]= btime[bno];
bno++;
if(bno &gt;= bmax) alarm[2]= -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(type == 0 || type == 1 || type == 2) {
    ch= choose(0, 1, 2);
    g= instance_create(0, 0, 353/* obj_spiderbullet */);
    g.choice= ch + 1;
    g.side= 1;
    ch2= choose(0, 1, 2);
    if(ch2 == ch) ch2++;
    if(ch2 &gt; 2) ch2= 0;
    g2= instance_create(0, 0, 353/* obj_spiderbullet */);
    g2.choice= ch2 + 1;
    g2.side= 1;
    if(type == 0) {
        g.speedfactor= 8;
        g2.speedfactor= 8;
        alarm[0]= 19;
    }
    if(type == 1) {
        g.speedfactor= 11;
        g2.speedfactor= 11;
        alarm[0]= 16;
    }
    if(type == 2) {
        g.speedfactor= 13;
        g2.speedfactor= 13;
        alarm[0]= 14;
    }
}
if(type == 3 || type == 4 || type == 5) {
    g= instance_create(0, 0, 351/* obj_donutbullet */);
    if(type == 3) {
        g.speedfactor= 4;
        alarm[0]= 17;
    }
    if(type == 4) {
        g.speedfactor= 3.5;
        alarm[0]= 17;
    }
    if(type == 5) {
        g.speedfactor= 3;
        alarm[0]= 16;
    }
}
if(type == 6 || type == 7 || type == 8) {
    g= instance_create(0, 0, 355/* obj_croissant */);
    g.speedfactor= 13;
    g.side= 0;
    if(type == 6) alarm[0]= 24;
    if(type == 7) alarm[0]= 22;
    if(type == 8) alarm[0]= 19;
}
if(type == 9 || type == 10 || type == 11 || type == 12) {
    g= instance_create(0, 0, 353/* obj_spiderbullet */);
    if(type == 9) {
        alarm[0]= 15;
        g.speedfactor= 4;
    }
    if(type == 10) {
        alarm[0]= 9;
        g.speedfactor= 6;
    }
    if(type == 11) {
        alarm[0]= 8;
        g.speedfactor= 8;
    }
    if(type == 12) {
        alarm[0]= 7;
        g.speedfactor= 10;
    }
}
if(type == 13 || type == 14 || type == 16) {
    g= instance_create(0, 0, 354/* obj_vertspider */);
    g= instance_create(0, 0, 354/* obj_vertspider */);
    g= instance_create(0, 0, 354/* obj_vertspider */);
    if(type == 16) obj_vertspider.dmg= dmg - 1;
    if(type == 13) alarm[0]= 22;
    if(type == 14) alarm[0]= 18;
    if(type == 16) alarm[0]= 16;
}
if(instance_exists(678/* blt_parent */)) {
    blt_parent.dmg= dmg;
    if(instance_exists(360/* obj_spiderb */) &amp;&amp; obj_spiderb.turnamt &gt;= 15)
        blt_parent.dmg= dmg - 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(type == 0) {
    scr_sp(0, 8, 1, 1, 0);
    scr_sp(0, 8, 1, 1, 20);
    scr_sp(0, 8, 3, 1, 0);
    scr_sp(0, 8, 3, 1, 20);
    scr_sp(0, 8, 2, 0, 0);
    scr_sp(0, 8, 2, 0, 20);
    scr_sp(0, 8, 3, 0, 0);
    scr_sp(0, 8, 1, 0, 0);
    global.firingrate= 10;
    global.turntimer-= 30;
}
if(type == 1) {
    scr_sp(0, 8, 2, 1, 0);
    scr_sp(0, 8, 3, 1, 16);
    scr_sp(0, 8, 1, 1, 0);
    scr_sp(0, 8, 2, 1, 16);
    scr_sp(0, 8, 2, 0, 0);
    scr_sp(0, 8, 1, 0, 16);
    scr_sp(0, 8, 2, 0, 0);
    scr_sp(0, 8, 3, 0, 16);
    scr_sp(0, 8, 2, 1, 0);
    scr_sp(0, 8, 3, 1, 16);
    scr_sp(0, 8, 1, 1, 0);
    scr_sp(0, 8, 2, 1, 16);
    global.firingrate= 8;
}
if(type == 2) {
    scr_sp(3, 9, 3, 1, 0);
    scr_sp(0, 9, 1, 1, 16);
    scr_sp(3, 9, 1, 1, 0);
    scr_sp(0, 9, 3, 1, 16);
    scr_sp(0, 9, 2, 0, 16);
    scr_sp(3, 9, 2, 0, 16);
    scr_sp(0, 9, 2, 1, 16);
    scr_sp(3, 9, 2, 1, 16);
    global.firingrate= 12;
}
if(type == 3) {
    scr_sp(0, 9, 1, 1, 8);
    scr_sp(0, 9, 3, 1, 8);
    scr_sp(0, 9, 2, 1, 16);
    scr_sp(3, 9, 1, 0, 13);
    scr_sp(3, 9, 3, 0, 13);
    scr_sp(3, 9, 2, 0, 20);
    scr_sp(1, 8, 1, 0, 20);
    scr_sp(1, 8, 3, 0, 20);
    scr_sp(1, 8, 1, 0, 20);
    global.turntimer+= 10;
    global.firingrate= 14;
}
if(type == 4) {
    scr_sp(3, 8, 2, 1, 18);
    scr_sp(0, 8, 2, 1, 18);
    scr_sp(3, 9, 2, 1, 15);
    scr_sp(0, 9, 2, 1, 15);
    scr_sp(3, 9.5, 2, 1, 14);
    scr_sp(0, 9.5, 2, 1, 14);
    scr_sp(3, 10, 2, 1, 13);
    scr_sp(0, 10, 2, 1, 13);
    scr_sp(3, 10.5, 2, 1, 12);
    scr_sp(0, 10.5, 2, 1, 12);
    scr_sp(3, 11, 2, 1, 11);
    scr_sp(0, 11, 2, 1, 11);
    scr_sp(3, 12, 2, 1, 10);
    scr_sp(0, 12, 2, 1, 10);
    scr_sp(3, 13, 2, 1, 9);
    scr_sp(0, 13, 2, 1, 9);
    scr_sp(3, 13, 2, 1, 9);
    scr_sp(0, 13, 2, 1, 9);
    global.firingrate= 14;
}
if(type == 5) {
    scr_sp(3, 10, 2, 1, 0);
    scr_sp(1, 5, 1, 1, 1);
    scr_sp(1, 5, 2, 1, 20);
    scr_sp(3, 10, 0, 0, 0);
    scr_sp(1, 5, 1, 0, 1);
    scr_sp(1, 5, 2, 0, 20);
    scr_sp(3, 10, 3, 1, 0);
    scr_sp(1, 5, 1, 1, 1);
    scr_sp(1, 5, 2, 1, 20);
    scr_sp(3, 10, 2, 0, 0);
    global.firingrate= 15;
    global.turntimer-= 10;
}
if(type == 6) {
    scr_sp(0, 11, 1, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    scr_sp(0, 11, 2, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    scr_sp(0, 11, 3, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    scr_sp(0, 11, 2, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    scr_sp(0, 11, 1, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    scr_sp(0, 11, 2, 1, 0);
    scr_sp(0, 11, 0, 0, 0);
    global.firingrate= 10;
    global.turntimer-= 10;
}
if(type == 7) {
    scr_sp(1, 6, 1, 1, 1);
    scr_sp(1, 6, 3, 1, 1);
    scr_sp(1, 6, 1, 0, 1);
    scr_sp(1, 6, 3, 0, 20);
    scr_sp(0, 12, 1, 1, 0);
    scr_sp(0, 12, 1, 0, 8);
    scr_sp(0, 12, 3, 1, 0);
    scr_sp(0, 12, 3, 0, 8);
    scr_sp(0, 12, 2, 1, 0);
    scr_sp(0, 12, 2, 0, 20);
    scr_sp(2, 13, 2, 0, 0);
    global.firingrate= 14;
    global.turntimer+= 40;
}
if(type == 8) {
    scr_sp(2, 13, 1, 0, 1);
    scr_sp(2, 13, 3, 0, 30);
    scr_sp(2, 13, 2, 0, 0);
    scr_sp(2, 13, 1, 1, 1);
    scr_sp(2, 13, 3, 1, 30);
    scr_sp(2, 13, 2, 1, 30);
    global.turntimer+= 10;
    global.firingrate= 20;
}
if(type == 9) {
    scr_sp(0, 9, 3, 1, 10);
    scr_sp(3, 9, 1, 1, 15);
    scr_sp(0, 9.5, 1, 1, 10);
    scr_sp(3, 9.5, 3, 1, 14);
    scr_sp(0, 10, 3, 1, 9);
    scr_sp(3, 10, 1, 1, 13);
    scr_sp(0, 11, 1, 1, 9);
    scr_sp(3, 11, 3, 1, 12);
    scr_sp(0, 12, 3, 1, 8);
    scr_sp(3, 12, 1, 1, 11);
    scr_sp(0, 13, 1, 1, 8);
    scr_sp(3, 13, 3, 1, 18);
    scr_sp(0, 13, 2, 1, 8);
    scr_sp(3, 13, 2, 1, 9);
    scr_sp(0, 13, 2, 1, 8);
    scr_sp(3, 13, 2, 1, 9);
    global.firingrate= 14;
}
if(type == 10) {
    scr_sp(0, 12, 3, 1, 0);
    scr_sp(0, 12, 0, 0, 0);
    scr_sp(0, 12, 1, 1, 0);
    scr_sp(0, 12, 0, 0, 0);
    scr_sp(0, 12, 2, 1, 0);
    scr_sp(0, 12, 0, 0, 0);
    scr_sp(0, 12, 3, 1, 0);
    scr_sp(0, 12, 0, 0, 0);
    scr_sp(0, 12, 1, 1, 0);
    scr_sp(0, 12, 0, 0, 0);
    scr_sp(0, 12, 2, 1, 0);
    scr_sp(0, 12, 0, 0, 18);
    scr_sp(3, 12, 2, 1, 1);
    scr_sp(3, 12, 2, 0, 0);
    global.firingrate= 9;
}
if(type == 11) {
    scr_sp(1, 8, 1, 0, 1);
    scr_sp(1, 8, 2, 0, 0);
    scr_sp(1, 8, 1, 1, 1);
    scr_sp(1, 8, 2, 1, 0);
    scr_sp(1, 8, 3, 0, 1);
    scr_sp(1, 8, 2, 0, 0);
    scr_sp(1, 8, 3, 1, 1);
    scr_sp(1, 8, 2, 1, 30);
    scr_sp(1, 8, 1, 0, 1);
    scr_sp(1, 8, 3, 0, 0);
    scr_sp(1, 8, 3, 1, 1);
    scr_sp(1, 8, 1, 1, 0);
    global.firingrate= 20;
}
if(type == 12) {
    scr_sp(2, 13, 1, 0, 0);
    scr_sp(2, 13, 3, 0, 0);
    scr_sp(2, 13, 2, 0, 0);
    scr_sp(2, 13, 1, 1, 0);
    scr_sp(2, 13, 3, 1, 0);
    scr_sp(2, 13, 2, 1, 0);
    scr_sp(2, 13, 1, 0, 0);
    scr_sp(2, 13, 3, 0, 0);
    scr_sp(2, 13, 2, 0, 0);
    global.firingrate= 18;
    global.turntimer+= 90;
}
if(type == 13) {
    scr_sp(3, 5, 2, 1, 0);
    scr_sp(0, 8, 2, 0, 10);
    scr_sp(3, 5, 2, 1, 0);
    scr_sp(0, 8, 2, 0, 10);
    scr_sp(3, 5, 2, 1, 0);
    scr_sp(0, 8, 2, 0, 10);
    scr_sp(3, 5, 2, 1, 0);
    scr_sp(0, 8, 2, 0, 10);
    scr_sp(3, 5, 2, 1, 0);
    scr_sp(0, 8, 2, 0, 10);
    global.firingrate= 14;
    global.turntimer+= 30;
}
if(type == 14) {
    scr_sp(1, 6, 1, 0, 1);
    scr_sp(1, 6, 2, 0, 1);
    scr_sp(1, 6, 3, 1, 1);
    scr_sp(1, 6, 2, 1, 38);
    scr_sp(3, 9, 2, 1, 1);
    scr_sp(3, 9, 2, 0, 8);
    scr_sp(3, 9, 2, 1, 40);
    scr_sp(2, 13, 1, 0, 4);
    scr_sp(2, 13, 3, 1, 4);
    scr_sp(2, 13, 3, 0, 4);
    scr_sp(2, 13, 1, 1, 25);
    scr_sp(0, 8, 2, 1, 1);
    scr_sp(0, 8, 2, 0, 15);
    global.firingrate= 14;
    global.turntimer+= 50;
}
if(type == 15) {
    scr_sp(3, 10, 1, 1, 0);
    scr_sp(3, 10, 2, 1, 0);
    scr_sp(3, 10, 3, 1, 0);
    scr_sp(3, 10, 2, 1, 0);
    scr_sp(3, 10.5, 1, 1, 0);
    scr_sp(3, 10.5, 2, 1, 0);
    scr_sp(3, 10.5, 3, 1, 0);
    scr_sp(3, 10.5, 2, 1, 0);
    scr_sp(3, 11, 1, 1, 0);
    scr_sp(3, 11, 2, 1, 0);
    scr_sp(3, 11, 3, 1, 0);
    scr_sp(3, 11, 2, 1, 0);
    scr_sp(3, 11.5, 1, 1, 0);
    scr_sp(3, 11.5, 2, 1, 0);
    scr_sp(3, 12, 3, 1, 0);
    scr_sp(3, 12, 2, 1, 0);
    scr_sp(3, 12, 1, 1, 0);
    scr_sp(3, 12, 2, 1, 0);
    scr_sp(3, 12, 3, 1, 0);
    global.firingrate= 9;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
