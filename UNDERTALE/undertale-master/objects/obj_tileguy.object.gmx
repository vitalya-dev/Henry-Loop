<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_maincharad</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mycoordx= 0;
mycoordy= 3;
moving= 0;
checkx= 0;
checky= 0;
prevx= x;
prevy= y;
electrocute= 0;
orange= -1;
green= 0;
sprite_index= 1045/* spr_maincharar */;
wblend= 16777215;
oblend= make_color_hsv(17, 83, 255);
yblend= make_color_hsv(45, 128, 255);
tileid= 0;
pir= 0;
dog= 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moved= 0;
prevx= x;
prevy= y;
if(moving == 1 &amp;&amp; moved == 0) {
    moving= 3;
    moved= 1;
}
if(moving == 2 &amp;&amp; moved == 0) {
    moving= 4;
    moved= 1;
}
if(moving == 3 &amp;&amp; moved == 0) {
    moving= 1;
    moved= 1;
}
if(moving == 4 &amp;&amp; moved == 0) {
    moving= 2;
    moved= 1;
}
electrocute= 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(moving == 1) {
    x+= 3;
    if(x &gt;= prevx + 18) {
        x= prevx + 20;
        event_user(1);
    }
}
if(moving == 2) {
    y-= 3;
    if(y &lt;= prevy - 18) {
        y= prevy - 20;
        event_user(1);
    }
}
if(moving == 3) {
    x-= 3;
    if(x &lt;= prevx - 18) {
        x= prevx - 20;
        event_user(1);
    }
}
if(moving == 4) {
    y+= 3;
    if(y &gt;= prevy + 18) {
        y= prevy + 20;
        event_user(1);
    }
}
if(moving == 0 &amp;&amp; !keyboard_check(37/* LEFT */) &amp;&amp; !keyboard_check(39/* RIGHT */) &amp;&amp; !keyboard_check(40/* DOWN */) &amp;&amp; !keyboard_check(38/* UP */)) {
    image_index= 0;
    image_speed= 0;
}
if(moving == 1) {
    sprite_index= 1045/* spr_maincharar */;
    image_speed= 0.334;
}
if(moving == 2) {
    sprite_index= 1044/* spr_maincharau */;
    image_speed= 0.334;
}
if(moving == 3) {
    sprite_index= 1046/* spr_maincharal */;
    image_speed= 0.334;
}
if(moving == 4) {
    sprite_index= 1043/* spr_maincharad */;
    image_speed= 0.334;
}
if(keyboard_check(39/* RIGHT */) &amp;&amp; moving == 0) {
    if(image_index == 0) image_index= 1;
    sprite_index= 1045/* spr_maincharar */;
    checkx= x + 30;
    checky= y + 25;
    thistile= 0;
    event_user(0);
    nexttile= thistile;
    if(nexttile != 2) {
        moving= 1;
        prevx= x;
    }
}
if(keyboard_check(38/* UP */) &amp;&amp; moving == 0) {
    if(image_index == 0) image_index= 1;
    sprite_index= 1044/* spr_maincharau */;
    checkx= x + 10;
    checky= y + 5;
    thistile= 0;
    event_user(0);
    nexttile= thistile;
    if(nexttile != 2 &amp;&amp; nexttile != 0) {
        moving= 2;
        prevy= y;
    }
}
if(keyboard_check(37/* LEFT */) &amp;&amp; moving == 0) {
    if(image_index == 0) image_index= 1;
    sprite_index= 1046/* spr_maincharal */;
    checkx= x - 10;
    checky= y + 25;
    thistile= 0;
    event_user(0);
    nexttile= thistile;
    if(nexttile != 2 &amp;&amp; nexttile != 0) {
        moving= 3;
        prevx= x;
    }
}
if(keyboard_check(40/* DOWN */) &amp;&amp; moving == 0) {
    if(image_index == 0) image_index= 1;
    sprite_index= 1043/* spr_maincharad */;
    checkx= x + 10;
    checky= y + 45;
    thistile= 0;
    event_user(0);
    nexttile= thistile;
    if(nexttile != 2 &amp;&amp; nexttile != 0) {
        moving= 4;
        prevy= y;
    }
}
obj_mainchara.x= x;
obj_mainchara.y= y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>checkx= x + 10;
checky= y + 20;
event_user(0);
mytile= thistile;
if(mytile == 0 &amp;&amp; moving == 1) {
    if(moving == 1) global.facing= 1;
    if(moving == 3) global.facing= 3;
    moving= 0;
    speed= 0;
    obj_mainchara.visible= 1;
    obj_mainchara.phasing= 0;
    global.interact= 0;
    instance_destroy();
}
if(mytile == 1) moving= 0;
if(mytile == 3) {
    if(orange != 0) {
        snd_play(28/* snd_bell */);
        image_speed= 0;
        with(tileid) {
            af= instance_create(x, y, 108/* obj_genafterimage */);
            af.sprite_index= 1755/* spr_tilewhite */;
            af.depth= depth - 1;
        }
        image_blend= yblend;
    }
    orange= 0;
    mytile= 0;
    tileid2= tileid;
    if(moving == 1) {
        checkx= x + 30;
        checky= y + 20;
    }
    if(moving == 2) {
        checkx= x + 10;
        checky= y - 5;
    }
    if(moving == 3) {
        checkx= x - 10;
        checky= y + 20;
    }
    if(moving == 4) {
        checkx= x + 10;
        checky= y + 35;
    }
    event_user(0);
    mytile2= thistile;
    if(mytile2 != 0 &amp;&amp; mytile2 != 2) {
        with(tileid2) {
            af= instance_create(x + 10, y + 10, 108/* obj_genafterimage */);
            af.sprite_index= 1747/* spr_tilearrow */;
            af.depth= depth - 2;
            af.image_angle= -90 + obj_tileguy.moving * 90;
            af.direction= -90 + obj_tileguy.moving * 90;
            af.image_alpha= 2;
            af.speed= obj_tileguy.speed / 3;
        }
        prevx= x;
        prevy= y;
    } else  moving= 0;
}
if(mytile == 4 &amp;&amp; electrocute == 0) {
    snd_play(24/* snd_shock */);
    with(tileid) {
        ga= instance_create(x, y, 107/* obj_genanim */);
        ga.sprite_index= 1749/* spr_tileyellow_shock */;
        ga.image_speed= 1;
        if(sprite_index == 1752) ga.sprite_index= 1750/* spr_tileyellow_shock_blue */;
    }
    electrocute= 1;
    alarm[5]= 10;
}
if(mytile == 5) {
    moving= 0;
    if(orange != 1) {
        image_blend= oblend;
        snd_play(28/* snd_bell */);
        with(tileid) {
            af= instance_create(x, y, 108/* obj_genafterimage */);
            af.sprite_index= 1755/* spr_tilewhite */;
            af.depth= depth - 1;
        }
    }
    orange= 1;
}
if(mytile == 6) {
    if(orange == 1) {
        if(electrocute == 0) {
            pir++;
            dogchance= 0;
            if(pir &gt; 8) dogchance= random(5);
            if(dog == 1) dogchance= 0;
            with(tileid) {
                ga= instance_create(x, y, 107/* obj_genanim */);
                ga.sprite_index= 1742/* spr_pirahna_anim_wip */;
                if(obj_tileguy.dogchance &gt; 4) {
                    ga.sprite_index= 1743/* spr_emergentdog */;
                    obj_tileguy.dog= 1;
                }
                ga.image_speed= 1;
            }
            snd_play(29/* snd_b */);
            electrocute= 1;
            alarm[5]= 2;
        }
    } else  moving= 0;
}
if(mytile == 7) {
    with(tileid) {
        af= instance_create(x, y, 108/* obj_genafterimage */);
        af.sprite_index= 1755/* spr_tilewhite */;
        af.depth= depth - 1;
    }
    global.flag[289]= 1;
    snd_play(115/* snd_yeah */);
    moving= 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_position(checkx, checky, 1216)) thistile= 1;
if(instance_position(checkx, checky, 1214)) thistile= 2;
if(instance_position(checkx, checky, 1215)) thistile= 3;
if(instance_position(checkx, checky, 1217)) thistile= 4;
if(instance_position(checkx, checky, 1218)) thistile= 5;
if(instance_position(checkx, checky, 1219)) thistile= 6;
if(instance_position(checkx, checky, 1221)) thistile= 7;
tileid= collision_point(checkx, checky, 1213, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
