<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up= 0;
down= 0;
left= 0;
right= 0;
quit= 0;
try_up= 0;
try_down= 0;
try_left= 0;
try_right= 0;
canquit= 1;
h_skip= 0;
j_xpos= 0;
j_ypos= 0;
j_dir= 0;
j_fr= 0;
j_fl= 0;
j_fu= 0;
j_fd= 0;
j_fr_p= 0;
j_fl_p= 0;
j_fu_p= 0;
j_fd_p= 0;
i= 0;
while(i &lt; 12) {
    j_prev[i]= 0;
    j_on[i]= 0;
    i++;
}
global.button0= 2;
global.button1= 1;
global.button2= 4;
global.analog_sense= 0.15;
global.analog_sense_sense= 0.01;
global.joy_dir= 0;
ini_open("config.ini");
b0_i= ini_read_real("joypad1", "b0", -1);
b1_i= ini_read_real("joypad1", "b1", -1);
b2_i= ini_read_real("joypad1", "b2", -1);
as_i= ini_read_real("joypad1", "as", -1);
jd_i= ini_read_real("joypad1", "jd", -1);
if(b0_i &gt;= 0) global.button0= b0_i;
if(b1_i &gt;= 0) global.button1= b1_i;
if(b2_i &gt;= 0) global.button2= b2_i;
if(as_i &gt;= 0) global.analog_sense= as_i;
if(jd_i &gt;= 0) global.joy_dir= jd_i;
ini_close();
debug_r= 0;
debug_f= 0;
j1= 0;
j2= 0;
ja= 0;
j_ch= 0;
jt= 0;
spec_rtimer= 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(canquit == 1 &amp;&amp; quit &gt; 20) game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time++;
if(jt == 0 &amp;&amp; j_ch != 2) {
    if(joystick_exists(1)) j_ch= 1;
    else  {
        if(j_ch == 1) j_ch= 0;
    }
}
if(jt == 4 &amp;&amp; j_ch != 1) {
    if(joystick_exists(2)) j_ch= 2;
    else  {
        if(j_ch == 2) j_ch= 0;
    }
}
jt++;
if(jt &gt;= 8) jt= 0;
if(j_ch &gt; 0) {
    j_prev[0]= j_on[0];
    j_on[0]= joystick_check_button(j_ch, global.button0);
    if(j_on[0] == 1 &amp;&amp; j_prev[0] != j_on[0])
        keyboard_key_press(90/* Z */);
    if(j_on[0] == 0 &amp;&amp; j_prev[0] != j_on[0])
        keyboard_key_release(90);
    j_prev[1]= j_on[1];
    j_on[1]= joystick_check_button(j_ch, global.button1);
    if(j_on[1] == 1 &amp;&amp; j_prev[1] != j_on[1])
        keyboard_key_press(88/* X */);
    if(j_on[1] == 0 &amp;&amp; j_prev[1] != j_on[1])
        keyboard_key_release(88);
    j_prev[2]= j_on[2];
    j_on[2]= joystick_check_button(j_ch, global.button2);
    if(j_on[2] == 1 &amp;&amp; j_prev[2] != j_on[2])
        keyboard_key_press(67/* C */);
    if(j_on[2] == 0 &amp;&amp; j_prev[2] != j_on[2])
        keyboard_key_release(67);
    j_fr_p= j_fr;
    j_fl_p= j_fl;
    j_fu_p= j_fu;
    j_fd_p= j_fd;
    j_fr= 0;
    j_fl= 0;
    j_fu= 0;
    j_fd= 0;
    if(global.joy_dir == 0 || global.joy_dir == 1) {
        j_xpos= joystick_xpos(j_ch);
        j_ypos= joystick_ypos(j_ch);
    }
    j_dir= joystick_direction(j_ch);
    if((global.joy_dir == 0 || global.joy_dir == 1) &amp;&amp; j_dir == 101) {
        if(j_xpos &gt;= global.analog_sense) j_fr= 1;
        if(j_xpos &lt;= -global.analog_sense) j_fl= 1;
        if(j_ypos &gt;= global.analog_sense) j_fd= 1;
        if(j_ypos &lt;= -global.analog_sense) j_fu= 1;
    }
    if(j_dir != 101) {
        if(j_dir == 100) j_fl= 1;
        if(j_dir == 98) j_fd= 1;
        if(j_dir == 102) j_fr= 1;
        if(j_dir == 104) j_fu= 1;
        if(j_dir == 99) {
            j_fr= 1;
            j_fd= 1;
        }
        if(j_dir == 97) {
            j_fd= 1;
            j_fl= 1;
        }
        if(j_dir == 103) {
            j_fu= 1;
            j_fl= 1;
        }
        if(j_dir == 105) {
            j_fu= 1;
            j_fr= 1;
        }
    }
    if(global.joy_dir == 0 || global.joy_dir == 2) {
        j_pov= joystick_pov(j_ch);
        if(j_pov == 0) j_fu= 1;
        if(j_pov == 270) j_fl= 1;
        if(j_pov == 90) j_fr= 1;
        if(j_pov == 180) j_fd= 1;
        if(j_pov == 315) {
            j_fu= 1;
            j_fl= 1;
        }
        if(j_pov == 45) {
            j_fu= 1;
            j_fr= 1;
        }
        if(j_pov == 225) {
            j_fd= 1;
            j_fl= 1;
        }
        if(j_pov == 135) {
            j_fd= 1;
            j_fr= 1;
        }
    }
    if(j_fr != j_fr_p &amp;&amp; j_fr == 1) keyboard_key_press(39/* RIGHT */);
    if(j_fl != j_fl_p &amp;&amp; j_fl == 1) keyboard_key_press(37/* LEFT */);
    if(j_fd != j_fd_p &amp;&amp; j_fd == 1) keyboard_key_press(40/* DOWN */);
    if(j_fu != j_fu_p &amp;&amp; j_fu == 1) keyboard_key_press(38/* UP */);
    if(j_fr != j_fr_p &amp;&amp; j_fr == 0) keyboard_key_release(39);
    if(j_fl != j_fl_p &amp;&amp; j_fl == 0) keyboard_key_release(37);
    if(j_fd != j_fd_p &amp;&amp; j_fd == 0) keyboard_key_release(40);
    if(j_fu != j_fu_p &amp;&amp; j_fu == 0) keyboard_key_release(38);
}
up= 0;
down= 0;
left= 0;
right= 0;
if(keyboard_check(38/* UP */)) try_up= 1;
if(keyboard_check_released(38/* UP */)) try_up= 0;
if(keyboard_check(40/* DOWN */)) try_down= 1;
if(keyboard_check_released(40/* DOWN */)) try_down= 0;
if(keyboard_check(39/* RIGHT */)) try_right= 1;
if(keyboard_check_released(39/* RIGHT */)) try_right= 0;
if(keyboard_check(37/* LEFT */)) try_left= 1;
if(keyboard_check_released(37/* LEFT */)) try_left= 0;
if(global.osflavor == 1) {
    if(try_up) up= keyboard_check_direct(38);
    if(try_down) down= keyboard_check_direct(40);
    if(try_left) left= keyboard_check_direct(37);
    if(try_right) right= keyboard_check_direct(39);
} else  {
    if(try_up) up= keyboard_check(38/* UP */);
    if(try_down) down= keyboard_check(40/* DOWN */);
    if(try_left) left= keyboard_check(37/* LEFT */);
    if(try_right) right= keyboard_check(39/* RIGHT */);
}
if(keyboard_check_released(38/* UP */)) up= 0;
if(keyboard_check_released(40/* DOWN */)) down= 0;
if(keyboard_check_released(37/* LEFT */)) left= 0;
if(keyboard_check_released(39/* RIGHT */)) right= 0;
if(keyboard_multicheck(2/* UNKNOWN(2) */) &amp;&amp; global.flag[28] == 1 &amp;&amp; instance_exists(782/* OBJ_WRITER */) &amp;&amp; !instance_exists(783/* obj_choicer */)) {
    if(h_skip == 0) {
        keyboard_key_press(88/* X */);
        keyboard_key_press(90/* Z */);
    }
    if(h_skip == 1) {
        keyboard_key_release(90);
        keyboard_key_release(88);
    }
    if(h_skip == 0) h_skip= 1;
    else  h_skip= 0;
}
if(global.debug == 1 &amp;&amp; keyboard_check_pressed(70/* F */))
    room_speed= 200;
if(global.debug == 1 &amp;&amp; keyboard_check_pressed(87/* W */))
    room_speed= 10;
if(keyboard_check_pressed(115/* F4 */)) {
    if(window_get_fullscreen()) window_set_fullscreen(0);
    else  window_set_fullscreen(1);
}
if(canquit == 1) {
    if(global.debug == 1 &amp;&amp; keyboard_check_pressed(82/* R */) &amp;&amp; !instance_exists(409/* obj_essaystuff */)) {
        debug_r++;
        if(debug_r &gt; 5) game_restart();
        spec_rtimer= 1;
    }
    spec_rtimer++;
    if(spec_rtimer &gt;= 6) debug_r= 0;
    if(keyboard_check(27/* ESCAPE */)) {
        quit++;
        if(!instance_exists(139/* obj_quittingmessage */))
            instance_create(0, 0, 139/* obj_quittingmessage */);
    } else  quit= 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SCR_GAMESTART(0, 0, 0, 0, 0);
time= 0;
image_speed= 0;
jjjjjj= 0;
repeat(20)  {
    global.tempvalue[jjjjjj]= 0;
    jjjjjj++;
}
ini_open("undertale.ini");
fskip= ini_read_real("FFFFF", "E", -1);
ftime= ini_read_real("FFFFF", "F", -1);
true_end= ini_read_real("EndF", "EndF", -1);
ini_close();
sksk= 0;
if(ftime == 1) {
    sksk= 1;
    room_goto(room_f_start);
}
if(true_end == 1 &amp;&amp; sksk == 0) {
    sksk= 1;
    room_goto(room_flowey_regret);
}
if(fskip &gt;= 1 &amp;&amp; sksk == 0) {
    global.filechoice= 8;
    scr_load();
    if(fskip == 1) room_goto(room_flowey_endchoice);
    if(fskip == 2) room_goto(room_castle_exit);
} else  {
    if(sksk == 0) room_goto_next();
}
if(file_exists("system_information_962") &amp;&amp; !file_exists("system_information_963"))
    room_goto(room_nothingness);
global.osflavor= 1;
if(os_type != 0) global.osflavor= 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug == 1) {
    draw_set_color(16777215);
    draw_text(0, 0, round(time / 30));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug == 1) {
    gx= file_text_open_write("system_information_962");
    file_text_write_string(gx, "a");
    file_text_close(gx);
    if(global.steam_int == 1 &amp;&amp; !steam_file_exists("system_information_962"))
        steam_file_write_file("system_information_962", "system_information_962");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
